---
- name: Add DNS information
  ansible.builtin.lineinfile:
    path: /etc/resolv.conf
    line: 'nameserver 192.168.1.231'

- name: Add search domain information
  ansible.builtin.lineinfile:
    path: /etc/resolv.conf
    line: 'search smithsonite.home'

- name: Add apt-transport-https
  ansible.builtin.apt:
    name: apt-transport-https
    state: present

- name: Add ca-certificates
  ansible.builtin.apt:
    name: ca-certificates
    state: present

- name: Add curl
  ansible.builtin.apt:
    name: curl
    state: present

- name: Configure Cifs mount
  ansible.builtin.include_tasks: cifs.yml
  when: cifsstorage

- name: Configure NFS Mount
  ansible.builtin.include_tasks: nfs.yml
  when: nfsstorage

- name: Add the overlay module
  community.general.modprobe:
    name: overlay
    state: present

- name: Add the br_netfilter module
  community.general.modprobe:
    name: br_netfilter
    state: present

- name: Copy kubekey script
  ansible.builtin.copy:
    src: kubekey.sh
    dest: /tmp/kubekey.sh
    owner: root
    group: root
    mode: '0755'
  register: keycopy

- name: Pull Kubernetes key
  ansible.builtin.command: /bin/bash /tmp/kubekey.sh
  when: keycopy is succeeded

- name: Add Kubernetes repository to apt
  ansible.builtin.apt_repository:
    repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main"
    filename: kubernetes.list
    state: present

- name: Run the equivalent of "apt-get update" as a separate step
  ansible.builtin.apt:
    update_cache: true

- name: Install extra kernel modules
  ansible.builtin.apt:
    name: linux-modules-extra-raspi
    state: present

- name: Add the configs module
  community.general.modprobe:
    name: configs
    state: present

- name: Install containerd
  ansible.builtin.apt:
    name: containerd={{ containerdversion }}
    state: present
    allow_downgrades: true
    allow_change_held_packages: true

- name: Prevent containerd from being upgraded
  ansible.builtin.dpkg_selections:
    name: containerd
    selection: hold

- name: Install runc
  ansible.builtin.apt:
    name: runc={{ runcversion }}
    state: present
    allow_downgrades: true
    allow_change_held_packages: true

- name: Prevent runc from being upgraded
  ansible.builtin.dpkg_selections:
    name: runc
    selection: hold

- name: Install kubelet
  ansible.builtin.apt:
    name: kubelet={{ kubeversion }}
    state: present
    allow_downgrades: true
    allow_change_held_packages: true

- name: Install kubeadm
  ansible.builtin.apt:
    name: kubeadm={{ kubeversion }}
    state: present
    allow_downgrades: true
    allow_change_held_packages: true

- name: Install kubectl
  ansible.builtin.apt:
    name: kubectl={{ kubeversion }}
    state: present
    allow_downgrades: true
    allow_change_held_packages: true

- name: Prevent kubelet from being upgraded
  ansible.builtin.dpkg_selections:
    name: kubelet
    selection: hold

- name: Prevent kubeadm from being upgraded
  ansible.builtin.dpkg_selections:
    name: kubeadm
    selection: hold

- name: Prevent kubectl from being upgraded
  ansible.builtin.dpkg_selections:
    name: kubectl
    selection: hold

- name: Create a CNI directory if it does not exist
  ansible.builtin.file:
    path: /opt/cni/bin
    state: directory
    mode: '0755'
  register: makecnidir

- name: List contents of CNI Directory
  ansible.builtin.command: ls /opt/cni/bin
  register: cnicontents
  when: makecnidir is succeeded

- name: Unarchive CNI
  ansible.builtin.unarchive:
    src: https://github.com/containernetworking/plugins/releases/download/v1.1.1/cni-plugins-linux-arm-v1.1.1.tgz
    dest: /opt/cni/bin
    remote_src: true
  when: cnicontents.stdout | length == 0

- name: Create containerd config directory
  ansible.builtin.file:
    path: /etc/containerd/
    state: directory
    mode: '0755'

- name: Copy config.toml
  ansible.builtin.copy:
    src: config.toml
    dest: /etc/containerd/config.toml
    owner: root
    group: root
    mode: '0755'
  notify:
    - 'csmithson12345.kubecluster : Restart containerd'

- name: Copy kubernetes.conf to systemctl
  ansible.builtin.copy:
    src: kubernetes.conf
    dest: /etc/sysctl.d/kubernetes.conf
    owner: root
    group: root
    mode: '0755'
  notify:
    - 'csmithson12345.kubecluster : Reload sysctl'

- name: Enable service kubelet, and not touch the state
  ansible.builtin.service:
    name: kubelet.service
    enabled: true

- name: Enable service containerd, and not touch the state
  ansible.builtin.service:
    name: containerd.service
    enabled: true

- name: Copy ISCSI config to autobot
  ansible.builtin.copy:
    src: autobot-eth0.yml
    dest: /etc/netplan/eth0.yml
    owner: root
    group: root
    mode: '0644'
  when: inventory_hostname == 'autobot.smithsonite.home'
  register: netplan

- name: Copy ISCSI config to smitkub1
  ansible.builtin.copy:
    src: smitkub1-eth0.yml
    dest: /etc/netplan/10-eth0.yaml
    owner: root
    group: root
    mode: '0644'
  when: inventory_hostname == 'smitkub1.smithsonite.home'
  register: netplan

- name: Copy ISCSI config to smitkub2
  ansible.builtin.copy:
    src: smitkub2-eth0.yml
    dest: /etc/netplan/10-eth0.yaml
    owner: root
    group: root
    mode: '0644'
  when: inventory_hostname == 'smitkub2.smithsonite.home'
  register: netplan

- name: Copy ISCSI config to smitkub3
  ansible.builtin.copy:
    src: smitkub3-eth0.yml
    dest: /etc/netplan/10-eth0.yaml
    owner: root
    group: root
    mode: '0644'
  when: inventory_hostname == 'smitkub3.smithsonite.home'
  register: netplan

- name: Copy netplan script
  ansible.builtin.copy:
    src: netplan_apply.sh
    dest: /tmp/netplan_apply.sh
    owner: root
    group: root
    mode: '0755'

- name: Restart netplan
  ansible.builtin.command: /bin/bash /tmp/netplan_apply.sh
  when: netplan is succeeded
  poll: 0
  async: 45

- name: Wait for system to become reachable
  ansible.builtin.wait_for_connection:
    timeout: 900
